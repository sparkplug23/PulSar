[env:tasmota32_base]
framework               = ${common.framework}
platform                = ${common32.platform}
platform_packages       = ${common32.platform_packages}
board                   = ${common32.board}
board_build.ldscript    = ${common32.board_build.ldscript}
board_build.partitions  = ${common32.board_build.partitions}
board_build.flash_mode  = ${common32.board_build.flash_mode}
board_build.f_flash     = ${common32.board_build.f_flash}
board_build.f_cpu       = ${common32.board_build.f_cpu}
monitor_speed           = ${common32.monitor_speed}
upload_port             = ${common32.upload_port}
upload_resetmethod      = ${common32.upload_resetmethod}
upload_speed            = ${common32.upload_speed}
extra_scripts           = ${common32.extra_scripts}
build_unflags           = ${common32.build_unflags}
build_flags             = ${common32.build_flags}
lib_extra_dirs          = ${common32.lib_extra_dirs}
lib_deps = ${common.lib_deps}
lib_ignore              =
    cc1101
    ESP32 Azure IoT Arduino
    ESP32 Async UDP
    ESP32 BLE Arduino
    SimpleBLE
    NetBIOS
    ESP32
    Preferences
    BluetoothSerial


[env:tasmota32_base-webcam]
extends = env:tasmota32_base
board                   = esp32cam
board_build.f_cpu       = 240000000L
build_flags             = ${common32.build_flags} -DFIRMWARE_WEBCAM
lib_extra_dirs          = lib/libesp32, lib/lib_basic

[env:tasmota32-minimal]
extends = env:tasmota32_base
build_flags             = ${common32.build_flags} -DFIRMWARE_MINIMAL -Wcpp
lib_extra_dirs          = lib/libesp32
monitor_filters = esp32_exception_decoder
build_type = debug

[env:esp32_rgboutsidetree]
extends = env:tasmota32_base
build_flags             = ${common32.build_flags} -DDEVICE_RGBOUTSIDETREE 
 -DBOARD_HAS_PSRAM -mfix-esp32-psram-cache-issue -lc-psram-workaround -lm-psram-workaround -DFIRMWARE_WEBCAM
;-Wcpp
lib_extra_dirs          = lib/libesp32, lib/lib_neopixel_legacy_2022, lib/lib_basic, lib/libesp32/network, lib/lib_network
;, lib/lib_tascompat
; monitor_filters = esp32_exception_decoder
; build_type = debug
upload_port = COM3
; upload_port = 192.168.1.119

[env:tasmota32-rgboutsidetree_tester]
extends = env:tasmota32_base
build_flags             = ${common32.build_flags} -DDEVICE_RGBOUTSIDETREE_TESTER -Wcpp
; lib_extra_dirs          = lib/libesp32
; monitor_filters = esp32_exception_decoder
; build_type = debug
upload_port = COM3
; upload_port = 192.168.1.74


[env:esp32_cam_tester]
extends = env:tasmota32_base
build_flags             = ${common32.build_flags} -DDEVICE_CAM_TESTER -Wcpp
; lib_extra_dirs          = lib/libesp32
; monitor_filters = esp32_exception_decoder
; build_type = debug
upload_port = COM3
; upload_port = 192.168.1.74

[env:esp32_camera_driveway]
extends = env:tasmota32_base
build_flags             = ${common32.build_flags} -D DEVICE_CAMERA_DRIVEWAY -Wcpp -w
; lib_extra_dirs          = lib/libesp32
lib_deps =
lib_extra_dirs          = lib/libesp32, lib/lib_basic, lib/libesp32/network, lib/lib_network
; monitor_filters = esp32_exception_decoder
; build_type = debug
; upload_port = COM19
; board_build.f_flash = 40000000L
; upload_protocol = espota
; upload_port = 192.168.1.119
;eye
upload_protocol = espota
upload_port = 192.168.1.64

[env:esp32_camera_2]
extends = env:tasmota32_base
build_flags             = ${common32.build_flags} -D DEVICE_CAMERA_2 -Wcpp -w
; lib_extra_dirs          = lib/libesp32
lib_deps =
lib_extra_dirs          = lib/libesp32, lib/lib_basic, lib/libesp32/network, lib/lib_network
; monitor_filters = esp32_exception_decoder
; build_type = debug
upload_port = COM9
; board_build.f_flash = 40000000L
; upload_protocol = espota
; upload_port = 192.168.1.119
;eye
; upload_protocol = espota
; upload_port = 192.168.1.64






[env:esp_32_bedroompanel]
extends = env:tasmota32_base
build_flags             = ${common32.build_flags} -D DEVICE_BEDROOMPANEL -Wcpp -w
lib_extra_dirs          = lib/libesp32, lib/lib_neopixel_legacy_2022, lib/lib_basic, lib/libesp32/network, lib/lib_network
; , lib/lib_arduinojson
; lib_extra_dirs          = lib/libesp32
; monitor_filters = esp32_exception_decoder
; build_type = debug
; upload_port = COM3
upload_port = 192.168.1.119
upload_protocol = espota
extra_scripts   = gzip_fw.py


[env:esp_32_deskpanel_01]
extends = env:tasmota32_base
build_flags             = ${common32.build_flags} -D DEVICE_DESKPANEL_01 -Wcpp -w
lib_extra_dirs          = lib/libesp32, lib/lib_neopixel_legacy_2022, lib/lib_basic, lib/libesp32/network, lib/lib_network
lib_deps =
; , lib/lib_arduinojson
; lib_extra_dirs          = lib/libesp32
; monitor_filters = esp32_exception_decoder
; build_type = debug
upload_port = COM14
; upload_port = 192.168.1.119
; upload_protocol = espota
; extra_scripts   = gzip_fw.py









[env:wh_clockbed]
extends = env:whitehall_32
build_unflags               = ${esp32_defaults.build_unflags}
build_flags                 = ${esp32_defaults.build_flags}
                                    -D DEVICE_RGBCLOCK_BEDROOM_WALL
                                    -w                                     
lib_extra_dirs          = ${common32.lib_extra_dirs}              
                          lib/libesp32
                          lib/lib_basic
                          lib/lib_network
                          lib/lib_display
                          lib/lib_onewire2023 
                          lib/lib_sensor
                          lib/lib_neopixel_legacy_2022
upload_protocol = espota
; upload_port = heating
upload_port = rgbclock_bedroom_wall.local
; upload_port = 192.168.0.86
; upload_port = COM7
; monitor_filters = esp32_exception_decoder
; build_type = debug




[env:wh_clock_tv]
extends = env:whitehall_32
build_unflags               = ${esp32_defaults.build_unflags}
build_flags                 = ${esp32_defaults.build_flags}
                                    -D DEVICE_RGBCLOCK_TVROOM
                                    -w                                     
lib_extra_dirs          = ${common32.lib_extra_dirs}              
                          lib/libesp32
                          lib/lib_basic
                          lib/lib_network
                          lib/lib_display
                          lib/lib_onewire2023 
                          lib/lib_sensor
                          lib/lib_neopixel_legacy_2022
upload_protocol = espota
upload_port = rgbclock_tvroom.local
; upload_port = 192.168.0.86
; upload_port = COM10
; monitor_filters = esp32_exception_decoder
; build_type = debug





; [env:esp_8266_deskpanel]
; build_flags = ${common.build_flags} -D DEVICE_DESKPANEL -w
; ; upload_port = bedroompanel.local
; ; upload_protocol = espota
; ; extra_scripts             =   gzip_fw.py
; ; upload_port = 192.168.1.217
; upload_port = COM3


[env:esp_32_rgbfireplace_tester]
extends = env:tasmota32_base
build_flags             = ${common32.build_flags} -D DEVICE_RGBFIREPLACE_TESTER -Wcpp -w
lib_extra_dirs          = lib/libesp32, lib/lib_neopixel_legacy_2022, lib/lib_basic, lib/libesp32/network, lib/lib_network
; , lib/lib_arduinojson
lib_deps = 
; lib_extra_dirs          = lib/libesp32
; monitor_filters = esp32_exception_decoder
; build_type = debug
; upload_port = COM3
upload_port = 192.168.1.171
; upload_port = rgbfireplace_tester.local
upload_protocol = espota
; extra_scripts   = gzip_fw.py



[env:esp_32_rgbesp32_1_tester]
extends = env:tasmota32_base
build_flags             = ${common32.build_flags} -D DEVICE_RGBESP32_1_TESTER -Wcpp -w
lib_extra_dirs          = lib/libesp32, lib/lib_neopixel_legacy_2022, lib/lib_basic, lib/libesp32/network, lib/lib_network
; , lib/lib_arduinojson
; lib_extra_dirs          = lib/libesp32
; monitor_filters = esp32_exception_decoder
; build_type = debug
; upload_port = COM3
upload_port = 192.168.1.216
upload_protocol = espota
; extra_scripts   = gzip_fw.py




[env:esp_32_rgbdisplay_garage]
extends = env:tasmota32_base
build_flags             = ${common32.build_flags} -D DEVICE_RGBDISPLAY_GARAGE -Wcpp -w
lib_extra_dirs          = lib/libesp32, lib/lib_neopixel_legacy_2022, lib/lib_basic, lib/libesp32/network, lib/lib_network, lib/lib_gps
lib_deps =
; , lib/lib_arduinojson
; lib_extra_dirs          = lib/libesp32
; monitor_filters = esp32_exception_decoder
; build_type = debug
upload_port = COM11
; upload_port = 192.168.1.137
; upload_protocol = espota
; extra_scripts   = gzip_fw.py


[env:wht_display_outbedroom]
extends = env:tasmota32_base
build_flags             = ${common32.build_flags} -D DEVICE_RGBDISPLAY_BEDROOM_DOUBLE_DIGIT -Wcpp -w
lib_extra_dirs          = lib/libesp32, lib/lib_neopixel_legacy_2022, lib/lib_basic, lib/libesp32/network, lib/lib_network
; monitor_filters = esp32_exception_decoder
; build_type = debug
; upload_port = COM23
upload_port = 192.168.0.221
upload_protocol = espota
; extra_scripts   = gzip_fw.py



[env:esp_32_sdcardwriter_tester]
extends = env:tasmota32_base
build_flags             = ${common32.build_flags} -D DEVICE_SDCARDWRITER_TESTER -Wcpp -w
lib_extra_dirs          = lib/libesp32, lib/lib_basic, lib/libesp32/network, lib/lib_network, lib/lib_gps
; , lib/lib_arduinojson
; lib_extra_dirs          = lib/libesp32
; monitor_filters = esp32_exception_decoder
; build_type = debug
; upload_port = COM19
upload_port = 192.168.0.87
upload_protocol = espota
; extra_scripts   = gzip_fw.py




[env:esp_32_hvac_oil_radiator]
extends = env:tasmota32_base
build_unflags               = ${esp32_defaults.build_unflags}
build_flags                 = ${esp32_defaults.build_flags}
                                    -D DEVICE_HVAC_OIL_RADIATOR
                                    -w                                     
lib_extra_dirs          = ${common32.lib_extra_dirs}
                            lib/libesp32/network
                            lib/lib_network
                            lib/lib_energy
; monitor_filters = esp32_exception_decoder
; build_type = debug
; upload_port = COM17
upload_port = 192.168.0.41
upload_protocol = espota


    

; [env:esp32doit-devkit-v1]
; platform = espressif32
; board = esp32doit-devkit-v1
; framework = arduino





; [env:tasmota32-lite]
; extends = env:tasmota32
; build_flags             = ${common32.build_flags} -DFIRMWARE_LITE
; lib_extra_dirs          = lib/libesp32

; [env:tasmota32-knx]
; extends = env:tasmota32
; build_flags             = ${common32.build_flags} -DFIRMWARE_KNX_NO_EMULATION
; lib_extra_dirs          = lib/libesp32, lib/lib_basic, lib/lib_div

; [env:tasmota32-sensors]
; extends = env:tasmota32
; build_flags             = ${common32.build_flags} -DFIRMWARE_SENSORS
; lib_extra_dirs          = lib/libesp32, lib/lib_basic, lib/lib_i2c, lib/lib_rf, lib/lib_div

; [env:tasmota32-display]
; extends = env:tasmota32
; build_flags             = ${common32.build_flags} -DFIRMWARE_DISPLAYS
; lib_extra_dirs          = lib/libesp32, lib/lib_basic, lib/lib_display

; [env:tasmota32-ir]
; extends = env:tasmota32
; build_flags             = ${common32.build_flags} ${irremoteesp_full.build_flags} -DFIRMWARE_IR
; lib_extra_dirs          = lib/libesp32, lib/lib_basic

; [env:tasmota32-ircustom]
; extends = env:tasmota32
; build_flags             = ${common32.build_flags} ${irremoteesp_full.build_flags} -DFIRMWARE_IR_CUSTOM

; [env:tasmota32-BG]
; extends = env:tasmota32
; build_flags             = ${common32.build_flags} -DMY_LANGUAGE=bg_BG

; [env:tasmota32-BR]
; extends = env:tasmota32
; build_flags             = ${common32.build_flags} -DMY_LANGUAGE=pt_BR

; [env:tasmota32-CN]
; extends = env:tasmota32
; build_flags             = ${common32.build_flags} -DMY_LANGUAGE=zh_CN

; [env:tasmota32-CZ]
; extends = env:tasmota32
; build_flags             = ${common32.build_flags} -DMY_LANGUAGE=cs_CZ

; [env:tasmota32-DE]
; extends = env:tasmota32
; build_flags             = ${common32.build_flags} -DMY_LANGUAGE=de_DE

; [env:tasmota32-ES]
; extends = env:tasmota32
; build_flags             = ${common32.build_flags} -DMY_LANGUAGE=es_ES

; [env:tasmota32-FR]
; extends = env:tasmota32
; build_flags             = ${common32.build_flags} -DMY_LANGUAGE=fr_FR

; [env:tasmota32-GR]
; extends = env:tasmota32
; build_flags             = ${common32.build_flags} -DMY_LANGUAGE=el_GR

; [env:tasmota32-HE]
; extends = env:tasmota32
; build_flags             = ${common32.build_flags} -DMY_LANGUAGE=he_HE

; [env:tasmota32-HU]
; extends = env:tasmota32
; build_flags             = ${common32.build_flags} -DMY_LANGUAGE=hu_HU

; [env:tasmota32-IT]
; extends = env:tasmota32
; build_flags             = ${common32.build_flags} -DMY_LANGUAGE=it_IT

; [env:tasmota32-KO]
; extends = env:tasmota32
; build_flags             = ${common32.build_flags} -DMY_LANGUAGE=ko_KO

; [env:tasmota32-NL]
; extends = env:tasmota32
; build_flags             = ${common32.build_flags} -DMY_LANGUAGE=nl_NL

; [env:tasmota32-PL]
; extends = env:tasmota32
; build_flags             = ${common32.build_flags} -DMY_LANGUAGE=pl_PL

; [env:tasmota32-PT]
; extends = env:tasmota32
; build_flags             = ${common32.build_flags} -DMY_LANGUAGE=pt_PT

; [env:tasmota32-RO]
; extends = env:tasmota32
; build_flags             = ${common32.build_flags} -DMY_LANGUAGE=ro_RO

; [env:tasmota32-RU]
; extends = env:tasmota32
; build_flags             = ${common32.build_flags} -DMY_LANGUAGE=ru_RU

; [env:tasmota32-SE]
; extends = env:tasmota32
; build_flags             = ${common32.build_flags} -DMY_LANGUAGE=sv_SE

; [env:tasmota32-SK]
; extends = env:tasmota32
; build_flags             = ${common32.build_flags} -DMY_LANGUAGE=sk_SK

; [env:tasmota32-TR]
; extends = env:tasmota32
; build_flags             = ${common32.build_flags} -DMY_LANGUAGE=tr_TR

; [env:tasmota32-TW]
; extends = env:tasmota32
; build_flags             = ${common32.build_flags} -DMY_LANGUAGE=zh_TW

; [env:tasmota32-UK]
; extends = env:tasmota32
; build_flags             = ${common32.build_flags} -DMY_LANGUAGE=uk_UA

; [env:tasmota32-VN]
; extends = env:tasmota32
; build_flags             = ${common32.build_flags} -DMY_LANGUAGE=vi_VN
